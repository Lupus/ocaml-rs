(* Generated by ocaml-rs *)

open! Bigarray

(* file: callbacks.rs *)

external apply1: ('a -> 'b) -> 'a -> 'b = "apply1"
external apply3: ('a -> 'b) -> 'a -> 'b = "apply3"
external apply_range: (int list -> 'a) -> int -> int -> 'a = "apply_range"

(* file: conv.rs *)

type enum1 = Empty | First of int | Second of string array
type struct1 = {a: int; b: float; mutable c: string option; d: string array option;}
type all_float_struct = {float_a: float; float_b: float}
type float_array_t = {fa: floatarray} [@@unboxed]
external enum1_empty: unit -> enum1 = "enum1_empty"
external enum1_first: int -> enum1 = "enum1_first"
external enum1_make_second: string -> enum1 = "enum1_make_second"
external enum1_get_second_value: enum1 -> string array option = "enum1_get_second_value"
external enum1_is_empty: enum1 -> bool = "enum1_is_empty"
external struct1_empty: unit -> struct1 = "struct1_empty"
external struct1_get_c: struct1 -> string option = "struct1_get_c"
external struct1_get_d: struct1 -> string array option = "struct1_get_d"
external struct1_set_c: struct1 -> string -> struct1 = "struct1_set_c"
external make_struct1: int -> float -> string option -> string array option -> struct1 = "make_struct1"
external string_non_copying: string -> string = "string_non_copying"
external direct_slice: int64 array -> int64 = "direct_slice"
external deep_clone: 'a -> 'a = "deep_clone"
external pair_vec: unit -> (string * int) array = "pair_vec"
external string_array: unit -> string array = "string_array"
external array_conv: bytes -> bytes = "array_conv"
external result_ok: 'a -> ('a, 'b) result = "result_ok"
external result_error: 'a -> ('b, 'a) result = "result_error"
external result_get_ok: ('a, 'b) result -> 'a option = "result_get_ok"
external result_get_error: ('a, 'b) result -> 'b option = "result_get_error"
external all_float_struct_inc_both: all_float_struct -> all_float_struct = "all_float_struct_inc_both"
external float_array_t_inner: float_array_t -> floatarray = "float_array_t_inner"

(* file: custom.rs *)

type testing
type testing_callback
type file
external testing_alloc: int64 -> testing = "testing_alloc"
external testing_set_c: testing -> string -> unit = "testing_set_c"
external testing_set_a: testing -> float -> unit = "testing_set_a"
external testing_get_values: testing -> (float * int64 * string) = "testing_get_values"
external testing_callback_alloc: (int -> float) -> testing_callback = "testing_callback_alloc"
external testing_callback_call: testing_callback -> int -> float = "testing_callback_call"
external file_open: string -> file = "file_open"
external file_read: file -> string = "file_read"
external file_close: file -> unit = "file_close"

(* file: runtime.rs *)

external more_than_five_params: float -> float -> float -> float -> float -> float -> float -> float = "more_than_five_params_bytecode" "more_than_five_params"
external mutable_parameter_with_more_than_five_arguments: bool -> bool -> int64 -> int64 -> int64 option -> int32 option -> unit = "mutable_parameter_with_more_than_five_arguments_bytecode" "mutable_parameter_with_more_than_five_arguments"
external raise_exc: float -> unit = "raise_exc"
external raise_failure: unit -> unit = "raise_failure"
external hash_variant_abc: int -> [`Abc of int] = "hash_variant_abc"
external hash_variant_def: float -> [`Def of float] = "hash_variant_def"
external test_panic: unit -> int = "test_panic"
external test_call_named: float -> float = "test_call_named"
external bench_func: unit -> unit = "bench_func"
external bench_native_func: unit -> unit = "bench_native_func"
external exn_to_string: exn -> string = "exn_to_string"
external gc_minor: unit -> unit = "gc_minor"
external gc_major: unit -> unit = "gc_major"
external gc_full_major: unit -> unit = "gc_full_major"
external gc_compact: unit -> unit = "gc_compact"

(* file: types.rs *)

external list_length: 'a list -> int = "list_length"
external list_nil: unit -> 'a list = "list_nil"
external list_cons: 'a list -> 'a -> 'a list = "list_cons"
external array_make_range: int -> int -> int array = "array_make_range"
external array_make_range_f: int -> int -> float array = "array_make_range_f"
external array_replace: 'a array -> int -> 'a -> 'a option = "array_replace"
external array1_of_string: string -> (int, int8_unsigned_elt, c_layout) Array1.t = "array1_of_string"
external array1_new: int -> init:int -> (int, int8_unsigned_elt, c_layout) Array1.t = "array1_new"
external array1_from_rust_vec: unit -> (float, float32_elt, c_layout) Array1.t = "array1_from_rust_vec"
external seq_sum: int Seq.t -> int = "seq_sum"
